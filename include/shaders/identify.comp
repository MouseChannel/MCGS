#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_atomic_int64 : require
#extension GL_EXT_debug_printf : enable
// #extension GL_EXT_shader_subgroup_extended_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
layout(local_size_x = 1024) in;
layout(push_constant, std430) uniform PushConstants
{
    uint g_num_elements;
};
#include "./allbuffer_reference.glsl"
#include "./push_contant.h"
// #include
layout(binding = eAddress, scalar) buffer _Address
{
    uint64_t xyz_address;
    uint64_t scale_address;
    uint64_t feature_address;
    uint64_t opacity_address;
    uint64_t rotation_address;
    uint64_t depth_address;
    uint64_t clamped_address;
    uint64_t radii_address;
    uint64_t mean2d_address;
    uint64_t conv3d_address;
    uint64_t conic_opacity_address;
    uint64_t rgb_address;
    uint64_t tiles_touched_address;
    uint64_t point_offsets_address;
// BinningState
    uint64_t point_list_keys_address;
    uint64_t point_list_keys_pingpong_address;
    uint64_t point_list_address;
    uint64_t point_list_pingpong_address;
// ImageState
    uint64_t ranges_address;
    uint64_t n_contrib_address;
    uint64_t accum_alpha_address;
};
void main()

{
    int idx = int(gl_GlobalInvocationID.x);
    if (idx >= g_num_elements) {
        return;
    }

    _point_list_keys point_list_keys = _point_list_keys(point_list_keys_address);
    _ranges ranges = _ranges(ranges_address);
    // Read tile ID from key. Update start/end of tile range if at limit.
    uint64_t key = point_list_keys.point_list_keys[idx];
    uint currtile = uint(key >> 32);
    if (idx == 0) {
        ranges.ranges[currtile].x = 0;

    } else {
        uint prevtile = uint(point_list_keys.point_list_keys[idx - 1] >> 32);
        if (currtile != prevtile) {
            ranges.ranges[prevtile].y = idx;
            ranges.ranges[currtile].x = idx;
        }
        // debugPrintfEXT("message%lu  \n", point_list_keys.point_list_keys[3]);
        // if (prevtile == 2 || currtile == 2) {
        //     debugPrintfEXT("message %u %u\n", idx, idx);
        // }
    }
    if (idx == g_num_elements - 1)
    ranges.ranges[currtile].y = g_num_elements;
}