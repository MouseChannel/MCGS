
#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_atomic_int64 : require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_KHR_shader_subgroup_vote : require

layout(push_constant, std430) uniform PushConstants
{
    uint g_num_elements;
};

#include "./allbuffer_reference.glsl"
#include "./config.glsl"
#include "./push_contant.h"
// #include
layout(binding = eAddress, scalar) buffer _Address
{
    uint64_t xyz_address;
    uint64_t scale_address;
    uint64_t feature_address;
    uint64_t opacity_address;
    uint64_t rotation_address;
    uint64_t depth_address;
    uint64_t clamped_address;
    uint64_t radii_address;
    uint64_t mean2d_address;
    uint64_t conv3d_address;
    uint64_t conic_opacity_address;
    uint64_t rgb_address;
    uint64_t tiles_touched_address;
    uint64_t point_offsets_address;
    // BinningState
    uint64_t point_list_keys_address;
    uint64_t point_list_keys_pingpong_address;
    uint64_t point_list_address;
    uint64_t point_list_pingpong_address;
    // ImageState
    uint64_t ranges_address;
    uint64_t n_contrib_address;
    uint64_t accum_alpha_address;
};

layout(set = 0, binding = render_out_index, rgba8) uniform writeonly image2D out_img;

layout(local_size_x = BLOCK_X, local_size_y = BLOCK_Y) in;

shared int collected_id[BLOCK_SIZE];
shared vec2 collected_xy[BLOCK_SIZE];
shared vec4 collected_conic_opacity[BLOCK_SIZE];
shared int flag;

void main()

{
    uint horizontal_blocks = (800 + BLOCK_X - 1) / BLOCK_X;
    uvec2 pix_min = uvec2(gl_WorkGroupID.x * BLOCK_X, gl_WorkGroupID.y * BLOCK_Y);
    uvec2 pix_max = uvec2(
        min(pix_min.x + BLOCK_X, 800),
        min(pix_min.y + BLOCK_Y, 800));

    uvec2 pix = uvec2(pix_min.x + gl_LocalInvocationID.x, pix_min.y + gl_LocalInvocationID.y);
    uint pix_id = 800 * pix.y + pix.x;
    vec2 pixf = vec2(float(pix.x), float(pix.y));

    // Check if this thread is associated with a valid pixel or outside.
    bool inside = pix.x < 800 && pix.y < 800;
    // Done threads can help with fetching, but don't rasterize
    bool done = !inside;

    _point_list point_list = _point_list(point_list_address);
    _ranges ranges = _ranges(ranges_address);
    _mean2d mean2d = _mean2d(mean2d_address);
    _conic_opacity conic_opacity = _conic_opacity(conic_opacity_address);
    _feature feature = _feature(feature_address);
    // Load start/end range of IDs to process in bit sorted list.
    uvec2 range = ranges.ranges[gl_WorkGroupID.y * horizontal_blocks + gl_WorkGroupID.x];
    const int rounds = int((range.y - range.x + BLOCK_SIZE - 1) / BLOCK_SIZE);
    int toDo = int(range.y - range.x);
    // Initialize helper variables
    float T = 1.0f;
    uint contributor = 0;
    uint last_contributor = 0;
    // float C[3];
    vec3 C = vec3(0.f);
    flag = 0;
    barrier();

    // Iterate over batches until all done or range is complete
    for (int i = 0; i < rounds; i++, toDo -= BLOCK_SIZE) {
        if (flag > BLOCK_SIZE) {
            debugPrintfEXT("message BLOCK_SIZE \n");
            break;
        }
        // if (subgroupAll(done)) {
        //     break;
        // }

        // Collectively fetch per-Gaussian data from global to shared
        int progress = i * BLOCK_SIZE + int(gl_LocalInvocationIndex);
        if (range.x + progress < range.y) {
            int coll_id = int(point_list.point_list[range.x + progress]);
            collected_id[gl_LocalInvocationIndex] = coll_id;
            collected_xy[gl_LocalInvocationIndex] = mean2d.mean2d[coll_id];
            collected_conic_opacity[gl_LocalInvocationIndex] = conic_opacity.conic_opacity[coll_id];
        }
        barrier();

        // Iterate over current batch
        for (int j = 0; !done && j < min(BLOCK_SIZE, toDo); j++) {
            // Keep track of current position in range
            contributor++;

            // Resample using conic matrix (cf. "Surface
            // Splatting" by Zwicker et al., 2001)
            vec2 xy = collected_xy[j];
            vec2 d = { xy.x - pixf.x, xy.y - pixf.y };
            vec4 con_o = collected_conic_opacity[j];
            float power = -0.5f * (con_o.x * d.x * d.x + con_o.z * d.y * d.y) - con_o.y * d.x * d.y;
            if (power > 0.0f)
                continue;

            // Eq. (2) from 3D Gaussian splatting paper.
            // Obtain alpha by multiplying with Gaussian opacity
            // and its exponential falloff from mean.
            // Avoid numerical instabilities (see paper appendix).
            float alpha = min(0.99f, con_o.w * exp(power));
            if (alpha < 1.0f / 255.0f)
                continue;
            float test_T = T * (1 - alpha);
            if (test_T < 0.0001f) {
                done = true;
                // debugPrintfEXT("message flag %d\n", flag);
                barrier();
                flag++;
                barrier();
                continue;
            }

            // Eq. (3) from 3D Gaussian splatting paper.
            C += feature.feature[collected_id[j]] * alpha * T;
            if (pix.x == 400 && pix.y == 400) {
                debugPrintfEXT("message %f %f %f \n", C.x, C.y, C.z);
            }
            // for (int ch = 0; ch < CHANNELS; ch++)
            //     C[ch] += features[collected_id[j] * CHANNELS + ch] * alpha * T;

            T = test_T;

            // Keep track of last range entry to update this
            // pixel.
            last_contributor = contributor;
        }
    }
    // All threads that treat valid pixel write out their final
    // rendering data to the frame and auxiliary buffers.
    if (inside) {
        // final_T[pix_id] = T;
        // n_contrib[pix_id] = last_contributor;

        // for (int ch = 0; ch < CHANNELS; ch++)
        //     out_color[ch * H * W + pix_id] = C[ch] + T * bg_color[ch];
        if (pix.x == 400 && pix.y == 400) {
            debugPrintfEXT("message outcolor %f %f %f\n", C.x, C.y, C.z);
        }
        imageStore(out_img, ivec2(pix), vec4(C, 1.f) + T * 0.f);
    }
}