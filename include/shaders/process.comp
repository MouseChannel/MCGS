#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#extension GL_EXT_debug_printf : enable
#include "./push_contant.h"

layout(binding = eAddress, scalar)
    buffer _Address
{
    uint64_t xyz_address;
    uint64_t scale_address;
    uint64_t feature_address;
    uint64_t opacity_address;
    uint64_t rotation_address;
    uint64_t depth_address;
    uint64_t clamped_address;
    uint64_t radii_address;
    uint64_t mean2d_address;
    uint64_t conv3d_address;
    uint64_t conic_opacity_address;
    uint64_t rgb_address;
    uint64_t tiles_touched_address;
    uint64_t point_offsets_address;
};
// layout(set = 0, binding = render_out_index, rgba8) uniform writeonly image2D out_img;

layout(push_constant) uniform _PushContant
{
    PushContant_GS gs_camera;
};
// layout(local_size_x = 128) in;

#include "./util.glsl"
void main()

{
    // uint sID = gl_NumSubgroups;
    // // debugPrintfEXT("messagestd %d\n", sID);

    // int r = subgroupAdd(1);
    // debugPrintfEXT("message %d\n", r);

    // return;

    int idx = int(gl_GlobalInvocationID.x) + int(gl_GlobalInvocationID.y * gl_NumWorkGroups.x);
    if (idx > gs_camera.point_num) {
        return;
    }
    vec3 p_view;
    in_frustum(idx, xyz_address, gs_camera.viewMatrix, gs_camera.projMatrix, false, p_view);

    // _xyz xyz1 = _xyz(xyz_address);
    // // vec3 p_orig = { xyz.xyz[3 * idx], xyz.xyz[3 * idx + 1], xyz.xyz[3 * idx + 2] };

    // vec3 p_orig1 = xyz1.xyz[idx];
    // if (idx == 12345) {
    //     debugPrintfEXT("messagein %f %f %f\n", p_orig1.x, p_orig1.y, p_orig1.z);
    // }

    // if (idx == 12345) {
    //     debugPrintfEXT("messagepro %f %f %f\n", p_view.x, p_view.y, p_view.z);
    // }
    // gl_GlobalInvocationIndex
    // debugPrintfEXT("message mocheng %d %d %d\n", gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, idx);

    _xyz xyz = _xyz(xyz_address);
    _scale scale = _scale(scale_address);
    _rotation rotation = _rotation(rotation_address);
    _rgb rgb = _rgb(rgb_address);
    _depth depth = _depth(depth_address);
    _radii radii = _radii(radii_address);
    _mean2d mean2d = _mean2d(mean2d_address);
    _conic_opacity conic_opacity = _conic_opacity(conic_opacity_address);
    _opacity opacity = _opacity(opacity_address);
    _tiles_touched tiles_touched = _tiles_touched(tiles_touched_address);

    vec3 p_orig = xyz.xyz[idx];
    vec4 p_hom = transformPoint4x4(p_orig, gs_camera.projMatrix);
    float p_w = 1.0f / (p_hom.w + 0.0000001f);
    vec3 p_proj = { p_hom.x * p_w, p_hom.y * p_w, p_hom.z * p_w };
    float[6] conv3D;
    computeCov3D(scale.scale[idx],
                 1.f,
                 rotation.rotation[idx],
                 conv3D);
    float focal_y = 800 / (2.0f * gs_camera.tanfov);

    vec3 cov = computeCov2D(p_orig, focal_y, focal_y, gs_camera.tanfov, gs_camera.tanfov, conv3D, gs_camera.viewMatrix);
    float det = (cov.x * cov.z - cov.y * cov.y);

    if (det == 0.0f)
        return;
    float det_inv = 1.f / det;
    vec3 conic = { cov.z * det_inv, -cov.y * det_inv, cov.x * det_inv };

    // Compute extent in screen space (by finding eigenvalues of
    // 2D covariance matrix). Use extent to compute a bounding rectangle
    // of screen-space tiles that this Gaussian overlaps with. Quit if
    // rectangle covers 0 tiles.
    float mid = 0.5f * (cov.x + cov.z);
    float lambda1 = mid + sqrt(max(0.1f, mid * mid - det));
    float lambda2 = mid - sqrt(max(0.1f, mid * mid - det));
    float my_radius = ceil(3.f * sqrt(max(lambda1, lambda2)));
    vec2 point_image = { ndc2Pix(p_proj.x, 800), ndc2Pix(p_proj.y, 800) };
    uvec2 rect_min, rect_max;

    uvec3 grid = uvec3((800 + BLOCK_X - 1) / BLOCK_X,
                       (800 + BLOCK_Y - 1) / BLOCK_Y,
                       1);
    getRect(point_image, int(my_radius), rect_min, rect_max, grid);
    if ((rect_max.x - rect_min.x) * (rect_max.y - rect_min.y) == 0)
        return;
    int max_coeffs = 16;
    int deg = 3;
    vec3 result = computeColorFromSH(idx, deg, max_coeffs, xyz_address, gs_camera.campos, feature_address, clamped_address);

    rgb.rgb[idx] = result;
    depth.depth[idx] = p_view.z;

    // if (idx == 23 || idx == 443 || idx == 86 || idx == 65 || idx == 88 || idx == 89) {
    //     debugPrintfEXT("message my_radius %f %d |%d\n", my_radius, int(my_radius), idx);
    // }

    if (int(my_radius) <= 0) {
        debugPrintfEXT("message my_radiusss idx %d \n", idx);
    }
    radii.radii[idx] = int(my_radius);
    mean2d.mean2d[idx] = point_image;
    // Inverse 2D covariance and opacity neatly pack into one float4
    conic_opacity.conic_opacity[idx] = vec4(conic.x, conic.y, conic.z, opacity.opacity[idx]);
    tiles_touched.tiles_touched[idx] = (rect_max.y - rect_min.y) * (rect_max.x - rect_min.x);
    // if (idx == 12345)
    //     debugPrintfEXT("message process %f %f %f %f %d %d \n",
    //                    p_view.z,
    //                    result.x,
    //                    result.y,
    //                    result.z,
    //                    tiles_touched.tiles_touched[4],
    //                    tiles_touched.tiles_touched[5]);
    // int temp[10] = { 1, 2, 3, 4, 5, 6, 1, 1, 1, 1 };
    // int prefix_sum = subgroupInclusiveAdd(temp[gl_LocalInvocationID.x]);
    // debugPrintfEXT("message subgroupInclusiveAdd %d %d\n", gl_LocalInvocationID.x, prefix_sum);

    // debugPrintfEXT("nullptr %f %d %d", p_view.z, radii.radii[idx], tiles_touched.tiles_touched[idx]);
    // // debugPrintfEXT("message %d %d %d %d", rect_min.x, rect_min.y, rect_max.x, rect_max.y);
    // debugPrintfEXT("gscamer  %f %f\n", gs_camera.viewMatrix[0][0], gs_camera.viewMatrix[1][0]);
}