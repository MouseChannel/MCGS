#version 460 
#include "DataStruct.h"

layout (set = 1, binding = 0) uniform Info {
    uint point_count;
};
layout (std430, set = 3, binding = 0) readonly buffer _GaussianPoint {
    GaussianPoint points[];
};

layout (std430, set = 1, binding = 2) writeonly buffer GaussianCov3d {
//    float gaussian_cov3d[];// (N, 6)
    mat3 gaussian_cov3d[];
};
void main(){

    if (gl_GlobalInvocationID < point_count){

        vec4 q = points[gl_GlobalInvocationID.x].rot;
        mat3 rot;
        float xx = q.x * q.x;
        float yy = q.y * q.y;
        float zz = q.z * q.z;
        float xy = q.x * q.y;
        float xz = q.x * q.z;
        float yz = q.y * q.z;
        float wx = q.w * q.x;
        float wy = q.w * q.y;
        float wz = q.w * q.z;
        rot[0][0] = 1.f - 2.f * (yy + zz);
        rot[0][1] = 2.f * (xy + wz);
        rot[0][2] = 2.f * (xz - wy);
        rot[1][0] = 2.f * (xy - wz);
        rot[1][1] = 1.f - 2.f * (xx + zz);
        rot[1][2] = 2.f * (yz + wx);
        rot[2][0] = 2.f * (xz + wy);
        rot[2][1] = 2.f * (yz - wx);
        rot[2][2] = 1.f - 2.f * (xx + yy);

        mat3 ss = mat3(0.f);
        ss[0][0] = s[0] * s[0];
        ss[1][1] = s[1] * s[1];
        ss[2][2] = s[2] * s[2];
        gaussian_cov3d[gl_GlobalInvocationID.x] = rot * ss * transpose(rot);

    }
}
