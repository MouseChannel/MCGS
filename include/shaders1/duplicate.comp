#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#include "./push_contant.h"

// layout(std430, set = 0, binding = 0) buffer elements_in
// {
//     uint64_t g_elements_in[];
// };

// layout(std430, set = 0, binding = 1) buffer elements_out
// {
//     uint64_t g_elements_out[];
// };
layout(binding = eAddress, scalar) buffer _Address
{
    uint64_t xyz_address;
    uint64_t scale_address;
    uint64_t feature_address;
    uint64_t opacity_address;
    uint64_t rotation_address;
    uint64_t depth_address;
    uint64_t clamped_address;
    uint64_t radii_address;
    uint64_t mean2d_address;
    uint64_t conv3d_address;
    uint64_t conic_opacity_address;
    uint64_t rgb_address;
    uint64_t tiles_touched_address;
    uint64_t point_offsets_address;
    // BinningState
    uint64_t point_list_keys_address;
    uint64_t point_list_keys_pingpong_address;
    uint64_t point_list_address;
    uint64_t point_list_pingpong_address;
    // ImageState
    uint64_t ranges_address;
    uint64_t n_contrib_address;
    uint64_t accum_alpha_address;
};

layout(push_constant) uniform _PushContant
{
    PushContant_Dup dup_pc;
};
// #include "./allbuffer_reference.glsl"
#include "./util.glsl"
layout(local_size_x = 1024) in;
void main()
{
    _tiles_touched tiles_touched = _tiles_touched(tiles_touched_address);
    // int idx = int(gl_GlobalInvocationID.x) + int(gl_GlobalInvocationID.y * gl_NumWorkGroups.x);
    int idx = int(gl_GlobalInvocationID.x);
    // debugPrintfEXT("message%d  \n", idx);
    if (idx >= dup_pc.g_num_elements) {
        // uint num_rendered = tiles_touched.tiles_touched[dup_pc.g_num_elements - 1];
        // debugPrintfEXT("message num_rendered %d\n", num_rendered);
        return;
    }
    _radii radii = _radii(radii_address);
    _mean2d mean2d = _mean2d(mean2d_address);
    _depth_uint depth = _depth_uint(depth_address);
    // _depth depth_t = _depth(depth_address);
    _point_list_keys point_list_keys = _point_list_keys(point_list_keys_address);
    _point_list point_list = _point_list(point_list_address);

    if (idx == 590) {

        for (int i = 94000; i < 94030; i++) {

            // debugPrintfEXT("message til %d  \n", tiles_touched.tiles_touched[i]);
        }
    }

    if (radii.radii[idx] > 0) {
        uint off = (idx == 0U) ? 0 : tiles_touched.tiles_touched[idx - 1];
        // debugPrintfEXT("message   %d %d %d\n", radii.radii[0], radii.radii[1], radii.radii[2]);
        uvec2 rect_min, rect_max;
        uvec3 grid = uvec3((800 + BLOCK_X - 1) / BLOCK_X,
                           (800 + BLOCK_Y - 1) / BLOCK_Y,
                           1);
        getRect(mean2d.mean2d[idx], radii.radii[idx], rect_min, rect_max, grid);
        uint tt = off;
        // For each tile that the bounding rect overlaps, emit a
        // key/value pair. The key is |  tile ID  |      depth      |,
        // with this key yields Gaussian IDs in a list, such that they
        // are first sorted by tile and then by depth.
        for (uint y = rect_min.y; y < rect_max.y; y++) {
            for (uint x = rect_min.x; x < rect_max.x; x++) {
                uint64_t key = y * grid.x + x;
                key <<= 32;

                key |= depth.depth[idx];
                if(off<1625771){

                point_list_keys.point_list_keys[off] = key;
                point_list.point_list[off] = idx;
                }

               
                off++;
              
              
            }
        }
    } else {
        // debugPrintfEXT("message smaller 0 %d %d \n", idx, radii.radii[idx]);
    }
    barrier();
    // if (subgroupElect()) {
    //     for (int i = 0; i < 1625771; i++) {
    //         if (g_elements_out[i] != 12345) {
    //             debugPrintfEXT("message %lu \n", g_elements_out[i]);
    //         }
    //     }
    // }
    // debugPrintfEXT("message num_rendered %d\n", num_rendered);
}